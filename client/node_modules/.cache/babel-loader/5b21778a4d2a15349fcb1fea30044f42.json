{"ast":null,"code":"var _jsxFileName = \"/Users/phillipyang/Desktop/Nasa-Images-v3/client/src/MarsRover.js\";\nimport React from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport { NavLink } from \"react-router-dom\";\nimport { fetchRover } from \"./NasaAPIs\";\nimport Loading from \"./Loading\";\nimport { formatDisplayDate } from \"./Formatting\";\nimport moment from \"moment\";\nimport DocumentTitle from \"react-document-title\";\nexport default class MarsRover extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.componentDidMount = async () => {\n      this.setState({\n        loading: true\n      });\n      var today = new Date();\n\n      if (this.props.location.state.earth_date) {\n        var dateComponents = this.props.location.state.earth_date.split(\"-\");\n        today.setDate(Number(dateComponents[2]));\n        today.setMonth(Number(dateComponents[1]) - 1);\n        today.setFullYear(Number(dateComponents[0]));\n        const photos = await fetchRover(this.props.location.state.earth_date);\n        this.setState({\n          photos\n        });\n      } else {\n        var year = today.getFullYear(),\n            month = today.getMonth() + 1,\n            day = today.getDate();\n\n        while (this.state.photos.length === 0) {\n          var todayString = moment(today).format(\"YYYY-M-D\");\n          const photos = await fetchRover(todayString);\n\n          if (!photos) {\n            this.setState({\n              overRequested: true\n            });\n            break;\n          }\n\n          if (photos.length > 0) {\n            this.setState({\n              photos\n            });\n            console.log(photos);\n          } else {\n            if (Number(day) === 1) {\n              month -= 1;\n\n              if (Number(month) === 5 || Number(month) === 7 || Number(month) === 8 || Number(month) === 10 || Number(month) === 12) {\n                day = 30;\n              } else if (Number(month) === 3) {\n                if (Number(year) % 4 === 0) {\n                  day = 29;\n                } else {\n                  day = 28;\n                }\n              } else if (Number(month) === 1) {\n                day = 31;\n                month = 12;\n                year -= 1;\n              } else {\n                day = 30;\n              }\n            } else {\n              day -= 1;\n            }\n\n            today.setMonth(month - 1);\n            today.setFullYear(year);\n            today.setDate(day);\n          }\n        }\n      }\n\n      this.setState({\n        currentDate: today,\n        previousDate: today,\n        loading: false\n      });\n    };\n\n    this.componentDidUpdate = async () => {\n      if (this.state.currentDate !== this.state.previousDate) {\n        this.setState({\n          previousDate: this.state.currentDate,\n          photos: [],\n          loading: true,\n          overRequested: false\n        });\n        var todayString = moment(this.state.currentDate).format(\"YYYY-M-D\");\n        const photos = await fetchRover(todayString);\n        console.log(photos); // console.log(photos.length);\n\n        if (photos.length === 0) {\n          this.setState({\n            photos,\n            loading: false\n          });\n        }\n\n        if (photos === null) {\n          this.setState({\n            overRequested: true,\n            loading: false\n          });\n        }\n\n        if (photos.length > 0) {\n          this.setState({\n            photos\n          });\n          this.setState({\n            loading: false\n          });\n        }\n      }\n    };\n\n    this.handleChange = event => {\n      this.setState({\n        currentDate: event\n      });\n    };\n\n    this.state = {\n      photos: [],\n      currentDate: \"\",\n      previousDate: \"\",\n      loading: false,\n      overRequested: false\n    };\n  }\n\n  render() {\n    return React.createElement(DocumentTitle, {\n      title: \"Mars Images\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"marsPage\",\n      onClick: this.props.onClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112\n      },\n      __self: this\n    }, this.state.overRequested ? React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, \"Too many requests to Nasa API \") : React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      className: \"page-title d-xs-block d-md-none\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"NASA\"), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120\n      },\n      __self: this\n    }, \"Mars Rover Photos\")), React.createElement(\"h1\", {\n      className: \"page-title d-none d-md-block\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, \"NASA Mars Rover Photos\"), React.createElement(\"div\", {\n      className: \"row photo-section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"mars-date-picker\",\n      className: \"col-12\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    }, React.createElement(DatePicker, {\n      selected: this.state.currentDate,\n      onChange: this.handleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128\n      },\n      __self: this\n    }))), this.state.loading ? React.createElement(Loading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }) : React.createElement(\"div\", {\n      className: \"photo-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }, this.state.photos.length === 0 ? React.createElement(\"div\", {\n      id: \"mars-photo-error\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }, \"No photos on \", formatDisplayDate(this.state.currentDate)) : React.createElement(\"div\", {\n      className: \"row photo-section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, this.state.photos.map(photo => {\n      return React.createElement(\"div\", {\n        className: \"mars-photo col-lg-3 col-md-4 col-sm-6\",\n        key: photo.id,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146\n        },\n        __self: this\n      }, React.createElement(NavLink, {\n        to: {\n          pathname: \"/mars/earth_date=\".concat(photo.earth_date, \"&photo_id=\").concat(photo.id),\n          state: {\n            email: this.props.location.state.email\n          }\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: photo.img_src,\n        alt: \"mars image\",\n        loading: \"lazy\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      })));\n    })))))));\n  }\n\n}","map":{"version":3,"sources":["/Users/phillipyang/Desktop/Nasa-Images-v3/client/src/MarsRover.js"],"names":["React","DatePicker","NavLink","fetchRover","Loading","formatDisplayDate","moment","DocumentTitle","MarsRover","Component","constructor","props","componentDidMount","setState","loading","today","Date","location","state","earth_date","dateComponents","split","setDate","Number","setMonth","setFullYear","photos","year","getFullYear","month","getMonth","day","getDate","length","todayString","format","overRequested","console","log","currentDate","previousDate","componentDidUpdate","handleChange","event","render","onClick","map","photo","id","pathname","email","img_src"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport DatePicker from \"react-datepicker\";\nimport { NavLink } from \"react-router-dom\";\nimport { fetchRover } from \"./NasaAPIs\";\nimport Loading from \"./Loading\";\nimport { formatDisplayDate } from \"./Formatting\";\nimport moment from \"moment\";\nimport DocumentTitle from \"react-document-title\";\n\nexport default class MarsRover extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      photos: [],\n      currentDate: \"\",\n      previousDate: \"\",\n      loading: false,\n      overRequested: false\n    };\n  }\n  componentDidMount = async () => {\n    this.setState({ loading: true });\n    var today = new Date();\n    if (this.props.location.state.earth_date) {\n      var dateComponents = this.props.location.state.earth_date.split(\"-\");\n      today.setDate(Number(dateComponents[2]));\n      today.setMonth(Number(dateComponents[1]) - 1);\n      today.setFullYear(Number(dateComponents[0]));\n      const photos = await fetchRover(this.props.location.state.earth_date);\n      this.setState({ photos });\n      \n    } else {\n      var year = today.getFullYear(),\n        month = today.getMonth() + 1,\n        day = today.getDate();\n\n      while (this.state.photos.length === 0) {\n        var todayString = moment(today).format(\"YYYY-M-D\");\n        const photos = await fetchRover(todayString);\n        if (!photos) {\n          this.setState({ overRequested: true });\n          break;\n        }\n        if (photos.length > 0) {\n          this.setState({ photos });\n          console.log(photos);\n        } else {\n          if (Number(day) === 1) {\n            month -= 1;\n            if (\n              Number(month) === 5 ||\n              Number(month) === 7 ||\n              Number(month) === 8 ||\n              Number(month) === 10 ||\n              Number(month) === 12\n            ) {\n              day = 30;\n            } else if (Number(month) === 3) {\n              if (Number(year) % 4 === 0) {\n                day = 29;\n              } else {\n                day = 28;\n              }\n            } else if (Number(month) === 1) {\n              day = 31;\n              month = 12;\n              year -= 1;\n            } else {\n              day = 30;\n            }\n          } else {\n            day -= 1;\n          }\n          today.setMonth(month - 1);\n          today.setFullYear(year);\n          today.setDate(day);\n        }\n      }\n    }\n    this.setState({ currentDate: today, previousDate: today, loading: false });\n  };\n  componentDidUpdate = async () => {\n    if (this.state.currentDate !== this.state.previousDate) {\n      this.setState({\n        previousDate: this.state.currentDate,\n        photos: [],\n        loading: true,\n        overRequested: false\n      });\n      var todayString = moment(this.state.currentDate).format(\"YYYY-M-D\");\n      const photos = await fetchRover(todayString);\n      console.log(photos);\n      // console.log(photos.length);\n      if (photos.length === 0) {\n        this.setState({ photos, loading: false });\n      }\n      if (photos === null) {\n        this.setState({ overRequested: true, loading: false });\n      }\n      if (photos.length > 0) {\n        this.setState({ photos });\n        this.setState({ loading: false });\n      }\n    }\n  };\n  handleChange = event => {\n    this.setState({ currentDate: event });\n  };\n  render() {\n    return (\n      <DocumentTitle title=\"Mars Images\">\n        <div id=\"marsPage\" onClick={this.props.onClick}>\n          {this.state.overRequested ? (\n            <div>Too many requests to Nasa API </div>\n          ) : (\n            <div>\n              <div className=\"container\">\n                <h1 className=\"page-title d-xs-block d-md-none\">\n                  <div>NASA</div>\n                  <div>Mars Rover Photos</div>\n                </h1>\n                <h1 className=\"page-title d-none d-md-block\">\n                  NASA Mars Rover Photos\n                </h1>\n                <div className=\"row photo-section\">\n                  {/* <div id=\"mars-photo-date\" className=\"col-12\">{formatDisplayDate(this.state.currentDate)}</div> */}\n                  <div id=\"mars-date-picker\" className=\"col-12\">\n                    <DatePicker\n                      selected={this.state.currentDate}\n                      onChange={this.handleChange}\n                    />\n                  </div>\n                </div>\n                {this.state.loading ? (\n                  <Loading />\n                ) : (\n                  <div className=\"photo-container\">\n                    {this.state.photos.length === 0 ? (\n                      <div id=\"mars-photo-error\">\n                        No photos on {formatDisplayDate(this.state.currentDate)}\n                      </div>\n                    ) : (\n                      <div className=\"row photo-section\">\n                        {this.state.photos.map(photo => {\n                          return (\n                            <div\n                              className=\"mars-photo col-lg-3 col-md-4 col-sm-6\"\n                              key={photo.id}\n                            >\n                              <NavLink\n                                to={{\n                                  pathname:`/mars/earth_date=${photo.earth_date}&photo_id=${photo.id}`,\n                                  state: {\n                                    email: this.props.location.state.email\n                                  }\n                                }}\n                              >\n                                <img\n                                  src={photo.img_src}\n                                  alt=\"mars image\"\n                                  loading=\"lazy\"\n                                />\n                              </NavLink>\n                            </div>\n                          );\n                        })}\n                      </div>\n                    )}\n                  </div>\n                )}\n              </div>\n            </div>\n          )}\n        </div>\n      </DocumentTitle>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}